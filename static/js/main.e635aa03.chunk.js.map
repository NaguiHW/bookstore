{"version":3,"sources":["components/book.js","components/bookList.js","components/booksForm.js","components/categoryFilter.js","containers/app.js","actions/index.js","reducers/book.js","reducers/filter.js","reducers/index.js","index.js"],"names":["Book","id","title","category","handleRemoveBook","className","type","onClick","BooksList","booksFiltered","map","book","key","uniqid","BooksForm","handleChange","handleSubmit","categories","onSubmit","placeholder","name","onChange","value","CategoryFilter","handleFilterChange","event","target","connect","state","books","bookReducer","filter","filterReducer","dispatch","addBook","ADD_BOOK","useState","setState","preventDefault","document","getElementById","initialState","action","defaultState","reducer","combineReducers","createStore","ReactDOM","render","store"],"mappings":"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","file":"static/js/main.e635aa03.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './book.scss';\n\nconst Book = ({\n  id, title, category, handleRemoveBook,\n}) => (\n  <tr className=\"row\">\n    <td className=\"left-column\">\n      <span className=\"category\">{category}</span>\n      <br />\n      <span className=\"book-title\">{title}</span>\n    </td>\n    <td className=\"right-column\"><button type=\"button\" onClick={() => handleRemoveBook(id)}>REMOVE BOOK</button></td>\n  </tr>\n);\n\nBook.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n};\n\nexport default Book;\n","import React from 'react';\nimport uniqid from 'uniqid';\nimport PropTypes from 'prop-types';\nimport Book from './book';\nimport './bookList.scss';\n\nconst BooksList = ({ booksFiltered, handleRemoveBook }) => (\n  <div>\n    <table>\n      <tbody>\n        {booksFiltered.map(book => (\n          <Book\n            id={book.id}\n            title={book.title}\n            category={book.category}\n            key={uniqid()}\n            handleRemoveBook={() => handleRemoveBook(book.id)}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n\nBooksList.propTypes = {\n  booksFiltered: PropTypes.oneOfType([PropTypes.any]).isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n};\n\nexport default BooksList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './booksForm.scss';\n\nconst BooksForm = ({ handleChange, handleSubmit, categories }) => (\n  <div className=\"form-area\">\n    <div className=\"title-form\">ADD NEW BOOK</div>\n    <form className=\"books-form\" onSubmit={handleSubmit}>\n      <input id=\"create-course-form\" type=\"text\" placeholder=\"Book title\" name=\"title\" onChange={handleChange} />\n      <div className=\"styled-select\">\n        <select onChange={handleChange} name=\"category\" className=\"select-box\">\n          {\n            categories.map(category => (\n              <option value={category} key={category}>{category}</option>\n            ))\n          }\n        </select>\n      </div>\n      <button type=\"submit\">ADD BOOK</button>\n    </form>\n  </div>\n);\n\nBooksForm.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  categories: PropTypes.oneOfType([PropTypes.any]).isRequired,\n};\n\nexport default BooksForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './categoryFilter.scss';\n\nconst categories = ['All', 'Action', 'Biography', 'History', 'Horror', 'Kids', 'Learning', 'Sci-Fi'];\n\nconst CategoryFilter = ({ handleFilterChange }) => (\n  <ul className=\"navbar\">\n    <li><h1 className=\"title\">Bookstore CMS</h1></li>\n    <li className=\"book-category\">BOOK CATEGORY: </li>\n    <li>\n      <select name=\"categories\" onChange={event => handleFilterChange(event.target.value)}>\n        {\n          categories.map(category => (\n            <option value={category} key={category}>{category}</option>\n          ))\n        }\n      </select>\n    </li>\n    <li className=\"icon\"><i className=\"fas fa-user\" /></li>\n  </ul>\n);\n\nCategoryFilter.propTypes = {\n  handleFilterChange: PropTypes.func.isRequired,\n};\n\nexport default CategoryFilter;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport uniqid from 'uniqid';\nimport BooksList from '../components/bookList';\nimport BooksForm from '../components/booksForm';\nimport CategoryFilter from '../components/categoryFilter';\nimport { REMOVE_BOOK, CHANGE_FILTER, ADD_BOOK } from '../actions';\nimport './app.scss';\n\nconst App = ({\n  handleFilterChange, filter, books, handleRemoveBook, addBook,\n}) => {\n  const categories = ['Action', 'Biography', 'History', 'Horror', 'Kids', 'Learning', 'Sci-Fi'];\n  const [state, setState] = useState({\n    title: '',\n    category: categories[0],\n    id: uniqid(),\n  });\n  const booksFiltered = filter === 'All' ? books : books.filter(book => book.category === filter);\n  const handleChange = event => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.value,\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (state.title !== '') {\n      addBook(state);\n      setState({\n        ...state,\n        title: '',\n        id: uniqid(),\n      });\n      document.getElementById('create-course-form').value = '';\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <CategoryFilter handleFilterChange={category => handleFilterChange(category)} />\n      <BooksList booksFiltered={booksFiltered} handleRemoveBook={handleRemoveBook} />\n      <BooksForm handleChange={handleChange} handleSubmit={handleSubmit} categories={categories} />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  handleFilterChange: PropTypes.func.isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n  addBook: PropTypes.func.isRequired,\n  filter: PropTypes.oneOfType([PropTypes.any]).isRequired,\n  books: PropTypes.oneOfType([PropTypes.any]).isRequired,\n};\n\nconst mapStateToProps = state => ({\n  books: state.bookReducer.books,\n  filter: state.filterReducer.category,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleRemoveBook: book => dispatch(REMOVE_BOOK(book)),\n  handleFilterChange: book => dispatch(CHANGE_FILTER(book)),\n  addBook: book => dispatch(ADD_BOOK(book)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const ADD_BOOK = book => ({\n  type: 'ADD_BOOK',\n  book,\n});\n\nexport const REMOVE_BOOK = id => ({\n  type: 'REMOVE_BOOK',\n  id,\n});\n\nexport const CHANGE_FILTER = category => ({\n  type: 'CHANGE_FILTER',\n  category,\n});\n","import uniqid from 'uniqid';\n\nconst initialState = {\n  books: [\n    {\n      id: uniqid(),\n      title: 'Steve Jobs',\n      category: 'Biography',\n    },\n    {\n      id: uniqid(),\n      title: 'It',\n      category: 'Horror',\n    },\n    {\n      id: uniqid(),\n      title: 'Ruby on Rails Tutorials',\n      category: 'Learning',\n    },\n  ],\n};\n\nconst bookReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_BOOK': return {\n      books: [...state.books, action.book],\n    };\n    case 'REMOVE_BOOK': return {\n      books: state.books.filter(book => book.id !== action.id),\n    };\n    default: return state;\n  }\n};\n\nexport default bookReducer;\n","const defaultState = {\n  category: 'All',\n};\n\nconst filterReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'CHANGE_FILTER': return {\n      category: action.category,\n    };\n    default: return state;\n  }\n};\n\nexport default filterReducer;\n","import { combineReducers, createStore } from 'redux';\nimport bookReducer from './book';\nimport filterReducer from './filter';\n\nconst reducer = combineReducers({\n  bookReducer,\n  filterReducer,\n});\n\nexport default createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/app';\nimport store from './reducers/index';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}